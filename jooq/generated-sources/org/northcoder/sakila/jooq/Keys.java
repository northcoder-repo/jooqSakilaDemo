/*
 * This file is generated by jOOQ.
 */
package org.northcoder.sakila.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.northcoder.sakila.jooq.tables.ActorTable;
import org.northcoder.sakila.jooq.tables.AddressTable;
import org.northcoder.sakila.jooq.tables.CategoryTable;
import org.northcoder.sakila.jooq.tables.CityTable;
import org.northcoder.sakila.jooq.tables.CountryTable;
import org.northcoder.sakila.jooq.tables.CustomerTable;
import org.northcoder.sakila.jooq.tables.FilmActorTable;
import org.northcoder.sakila.jooq.tables.FilmCategoryTable;
import org.northcoder.sakila.jooq.tables.FilmTable;
import org.northcoder.sakila.jooq.tables.FilmTextTable;
import org.northcoder.sakila.jooq.tables.InventoryTable;
import org.northcoder.sakila.jooq.tables.LanguageTable;
import org.northcoder.sakila.jooq.tables.PaymentTable;
import org.northcoder.sakila.jooq.tables.RentalTable;
import org.northcoder.sakila.jooq.tables.StaffTable;
import org.northcoder.sakila.jooq.tables.StoreTable;
import org.northcoder.sakila.jooq.tables.records.ActorRecord;
import org.northcoder.sakila.jooq.tables.records.AddressRecord;
import org.northcoder.sakila.jooq.tables.records.CategoryRecord;
import org.northcoder.sakila.jooq.tables.records.CityRecord;
import org.northcoder.sakila.jooq.tables.records.CountryRecord;
import org.northcoder.sakila.jooq.tables.records.CustomerRecord;
import org.northcoder.sakila.jooq.tables.records.FilmActorRecord;
import org.northcoder.sakila.jooq.tables.records.FilmCategoryRecord;
import org.northcoder.sakila.jooq.tables.records.FilmRecord;
import org.northcoder.sakila.jooq.tables.records.FilmTextRecord;
import org.northcoder.sakila.jooq.tables.records.InventoryRecord;
import org.northcoder.sakila.jooq.tables.records.LanguageRecord;
import org.northcoder.sakila.jooq.tables.records.PaymentRecord;
import org.northcoder.sakila.jooq.tables.records.RentalRecord;
import org.northcoder.sakila.jooq.tables.records.StaffRecord;
import org.northcoder.sakila.jooq.tables.records.StoreRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * sakila.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ActorRecord> KEY_ACTOR_PRIMARY = Internal.createUniqueKey(ActorTable.ACTOR, DSL.name("KEY_actor_PRIMARY"), new TableField[] { ActorTable.ACTOR.ACTOR_ID }, true);
    public static final UniqueKey<AddressRecord> KEY_ADDRESS_PRIMARY = Internal.createUniqueKey(AddressTable.ADDRESS, DSL.name("KEY_address_PRIMARY"), new TableField[] { AddressTable.ADDRESS.ADDRESS_ID }, true);
    public static final UniqueKey<CategoryRecord> KEY_CATEGORY_PRIMARY = Internal.createUniqueKey(CategoryTable.CATEGORY, DSL.name("KEY_category_PRIMARY"), new TableField[] { CategoryTable.CATEGORY.CATEGORY_ID }, true);
    public static final UniqueKey<CityRecord> KEY_CITY_PRIMARY = Internal.createUniqueKey(CityTable.CITY, DSL.name("KEY_city_PRIMARY"), new TableField[] { CityTable.CITY.CITY_ID }, true);
    public static final UniqueKey<CountryRecord> KEY_COUNTRY_PRIMARY = Internal.createUniqueKey(CountryTable.COUNTRY, DSL.name("KEY_country_PRIMARY"), new TableField[] { CountryTable.COUNTRY.COUNTRY_ID }, true);
    public static final UniqueKey<CustomerRecord> KEY_CUSTOMER_PRIMARY = Internal.createUniqueKey(CustomerTable.CUSTOMER, DSL.name("KEY_customer_PRIMARY"), new TableField[] { CustomerTable.CUSTOMER.CUSTOMER_ID }, true);
    public static final UniqueKey<FilmRecord> KEY_FILM_PRIMARY = Internal.createUniqueKey(FilmTable.FILM, DSL.name("KEY_film_PRIMARY"), new TableField[] { FilmTable.FILM.FILM_ID }, true);
    public static final UniqueKey<FilmActorRecord> KEY_FILM_ACTOR_PRIMARY = Internal.createUniqueKey(FilmActorTable.FILM_ACTOR, DSL.name("KEY_film_actor_PRIMARY"), new TableField[] { FilmActorTable.FILM_ACTOR.ACTOR_ID, FilmActorTable.FILM_ACTOR.FILM_ID }, true);
    public static final UniqueKey<FilmCategoryRecord> KEY_FILM_CATEGORY_PRIMARY = Internal.createUniqueKey(FilmCategoryTable.FILM_CATEGORY, DSL.name("KEY_film_category_PRIMARY"), new TableField[] { FilmCategoryTable.FILM_CATEGORY.FILM_ID, FilmCategoryTable.FILM_CATEGORY.CATEGORY_ID }, true);
    public static final UniqueKey<FilmTextRecord> KEY_FILM_TEXT_PRIMARY = Internal.createUniqueKey(FilmTextTable.FILM_TEXT, DSL.name("KEY_film_text_PRIMARY"), new TableField[] { FilmTextTable.FILM_TEXT.FILM_ID }, true);
    public static final UniqueKey<InventoryRecord> KEY_INVENTORY_PRIMARY = Internal.createUniqueKey(InventoryTable.INVENTORY, DSL.name("KEY_inventory_PRIMARY"), new TableField[] { InventoryTable.INVENTORY.INVENTORY_ID }, true);
    public static final UniqueKey<LanguageRecord> KEY_LANGUAGE_PRIMARY = Internal.createUniqueKey(LanguageTable.LANGUAGE, DSL.name("KEY_language_PRIMARY"), new TableField[] { LanguageTable.LANGUAGE.LANGUAGE_ID }, true);
    public static final UniqueKey<PaymentRecord> KEY_PAYMENT_PRIMARY = Internal.createUniqueKey(PaymentTable.PAYMENT, DSL.name("KEY_payment_PRIMARY"), new TableField[] { PaymentTable.PAYMENT.PAYMENT_ID }, true);
    public static final UniqueKey<RentalRecord> KEY_RENTAL_PRIMARY = Internal.createUniqueKey(RentalTable.RENTAL, DSL.name("KEY_rental_PRIMARY"), new TableField[] { RentalTable.RENTAL.RENTAL_ID }, true);
    public static final UniqueKey<RentalRecord> KEY_RENTAL_RENTAL_DATE = Internal.createUniqueKey(RentalTable.RENTAL, DSL.name("KEY_rental_rental_date"), new TableField[] { RentalTable.RENTAL.RENTAL_DATE, RentalTable.RENTAL.INVENTORY_ID, RentalTable.RENTAL.CUSTOMER_ID }, true);
    public static final UniqueKey<StaffRecord> KEY_STAFF_PRIMARY = Internal.createUniqueKey(StaffTable.STAFF, DSL.name("KEY_staff_PRIMARY"), new TableField[] { StaffTable.STAFF.STAFF_ID }, true);
    public static final UniqueKey<StoreRecord> KEY_STORE_IDX_UNIQUE_MANAGER = Internal.createUniqueKey(StoreTable.STORE, DSL.name("KEY_store_idx_unique_manager"), new TableField[] { StoreTable.STORE.MANAGER_STAFF_ID }, true);
    public static final UniqueKey<StoreRecord> KEY_STORE_PRIMARY = Internal.createUniqueKey(StoreTable.STORE, DSL.name("KEY_store_PRIMARY"), new TableField[] { StoreTable.STORE.STORE_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AddressRecord, CityRecord> FK_ADDRESS_CITY = Internal.createForeignKey(AddressTable.ADDRESS, DSL.name("fk_address_city"), new TableField[] { AddressTable.ADDRESS.CITY_ID }, Keys.KEY_CITY_PRIMARY, new TableField[] { CityTable.CITY.CITY_ID }, true);
    public static final ForeignKey<CityRecord, CountryRecord> FK_CITY_COUNTRY = Internal.createForeignKey(CityTable.CITY, DSL.name("fk_city_country"), new TableField[] { CityTable.CITY.COUNTRY_ID }, Keys.KEY_COUNTRY_PRIMARY, new TableField[] { CountryTable.COUNTRY.COUNTRY_ID }, true);
    public static final ForeignKey<CustomerRecord, AddressRecord> FK_CUSTOMER_ADDRESS = Internal.createForeignKey(CustomerTable.CUSTOMER, DSL.name("fk_customer_address"), new TableField[] { CustomerTable.CUSTOMER.ADDRESS_ID }, Keys.KEY_ADDRESS_PRIMARY, new TableField[] { AddressTable.ADDRESS.ADDRESS_ID }, true);
    public static final ForeignKey<CustomerRecord, StoreRecord> FK_CUSTOMER_STORE = Internal.createForeignKey(CustomerTable.CUSTOMER, DSL.name("fk_customer_store"), new TableField[] { CustomerTable.CUSTOMER.STORE_ID }, Keys.KEY_STORE_PRIMARY, new TableField[] { StoreTable.STORE.STORE_ID }, true);
    public static final ForeignKey<FilmRecord, LanguageRecord> FK_FILM_LANGUAGE = Internal.createForeignKey(FilmTable.FILM, DSL.name("fk_film_language"), new TableField[] { FilmTable.FILM.LANGUAGE_ID }, Keys.KEY_LANGUAGE_PRIMARY, new TableField[] { LanguageTable.LANGUAGE.LANGUAGE_ID }, true);
    public static final ForeignKey<FilmRecord, LanguageRecord> FK_FILM_LANGUAGE_ORIGINAL = Internal.createForeignKey(FilmTable.FILM, DSL.name("fk_film_language_original"), new TableField[] { FilmTable.FILM.ORIGINAL_LANGUAGE_ID }, Keys.KEY_LANGUAGE_PRIMARY, new TableField[] { LanguageTable.LANGUAGE.LANGUAGE_ID }, true);
    public static final ForeignKey<FilmActorRecord, ActorRecord> FK_FILM_ACTOR_ACTOR = Internal.createForeignKey(FilmActorTable.FILM_ACTOR, DSL.name("fk_film_actor_actor"), new TableField[] { FilmActorTable.FILM_ACTOR.ACTOR_ID }, Keys.KEY_ACTOR_PRIMARY, new TableField[] { ActorTable.ACTOR.ACTOR_ID }, true);
    public static final ForeignKey<FilmActorRecord, FilmRecord> FK_FILM_ACTOR_FILM = Internal.createForeignKey(FilmActorTable.FILM_ACTOR, DSL.name("fk_film_actor_film"), new TableField[] { FilmActorTable.FILM_ACTOR.FILM_ID }, Keys.KEY_FILM_PRIMARY, new TableField[] { FilmTable.FILM.FILM_ID }, true);
    public static final ForeignKey<FilmCategoryRecord, CategoryRecord> FK_FILM_CATEGORY_CATEGORY = Internal.createForeignKey(FilmCategoryTable.FILM_CATEGORY, DSL.name("fk_film_category_category"), new TableField[] { FilmCategoryTable.FILM_CATEGORY.CATEGORY_ID }, Keys.KEY_CATEGORY_PRIMARY, new TableField[] { CategoryTable.CATEGORY.CATEGORY_ID }, true);
    public static final ForeignKey<FilmCategoryRecord, FilmRecord> FK_FILM_CATEGORY_FILM = Internal.createForeignKey(FilmCategoryTable.FILM_CATEGORY, DSL.name("fk_film_category_film"), new TableField[] { FilmCategoryTable.FILM_CATEGORY.FILM_ID }, Keys.KEY_FILM_PRIMARY, new TableField[] { FilmTable.FILM.FILM_ID }, true);
    public static final ForeignKey<InventoryRecord, FilmRecord> FK_INVENTORY_FILM = Internal.createForeignKey(InventoryTable.INVENTORY, DSL.name("fk_inventory_film"), new TableField[] { InventoryTable.INVENTORY.FILM_ID }, Keys.KEY_FILM_PRIMARY, new TableField[] { FilmTable.FILM.FILM_ID }, true);
    public static final ForeignKey<InventoryRecord, StoreRecord> FK_INVENTORY_STORE = Internal.createForeignKey(InventoryTable.INVENTORY, DSL.name("fk_inventory_store"), new TableField[] { InventoryTable.INVENTORY.STORE_ID }, Keys.KEY_STORE_PRIMARY, new TableField[] { StoreTable.STORE.STORE_ID }, true);
    public static final ForeignKey<PaymentRecord, CustomerRecord> FK_PAYMENT_CUSTOMER = Internal.createForeignKey(PaymentTable.PAYMENT, DSL.name("fk_payment_customer"), new TableField[] { PaymentTable.PAYMENT.CUSTOMER_ID }, Keys.KEY_CUSTOMER_PRIMARY, new TableField[] { CustomerTable.CUSTOMER.CUSTOMER_ID }, true);
    public static final ForeignKey<PaymentRecord, RentalRecord> FK_PAYMENT_RENTAL = Internal.createForeignKey(PaymentTable.PAYMENT, DSL.name("fk_payment_rental"), new TableField[] { PaymentTable.PAYMENT.RENTAL_ID }, Keys.KEY_RENTAL_PRIMARY, new TableField[] { RentalTable.RENTAL.RENTAL_ID }, true);
    public static final ForeignKey<PaymentRecord, StaffRecord> FK_PAYMENT_STAFF = Internal.createForeignKey(PaymentTable.PAYMENT, DSL.name("fk_payment_staff"), new TableField[] { PaymentTable.PAYMENT.STAFF_ID }, Keys.KEY_STAFF_PRIMARY, new TableField[] { StaffTable.STAFF.STAFF_ID }, true);
    public static final ForeignKey<RentalRecord, CustomerRecord> FK_RENTAL_CUSTOMER = Internal.createForeignKey(RentalTable.RENTAL, DSL.name("fk_rental_customer"), new TableField[] { RentalTable.RENTAL.CUSTOMER_ID }, Keys.KEY_CUSTOMER_PRIMARY, new TableField[] { CustomerTable.CUSTOMER.CUSTOMER_ID }, true);
    public static final ForeignKey<RentalRecord, InventoryRecord> FK_RENTAL_INVENTORY = Internal.createForeignKey(RentalTable.RENTAL, DSL.name("fk_rental_inventory"), new TableField[] { RentalTable.RENTAL.INVENTORY_ID }, Keys.KEY_INVENTORY_PRIMARY, new TableField[] { InventoryTable.INVENTORY.INVENTORY_ID }, true);
    public static final ForeignKey<RentalRecord, StaffRecord> FK_RENTAL_STAFF = Internal.createForeignKey(RentalTable.RENTAL, DSL.name("fk_rental_staff"), new TableField[] { RentalTable.RENTAL.STAFF_ID }, Keys.KEY_STAFF_PRIMARY, new TableField[] { StaffTable.STAFF.STAFF_ID }, true);
    public static final ForeignKey<StaffRecord, AddressRecord> FK_STAFF_ADDRESS = Internal.createForeignKey(StaffTable.STAFF, DSL.name("fk_staff_address"), new TableField[] { StaffTable.STAFF.ADDRESS_ID }, Keys.KEY_ADDRESS_PRIMARY, new TableField[] { AddressTable.ADDRESS.ADDRESS_ID }, true);
    public static final ForeignKey<StaffRecord, StoreRecord> FK_STAFF_STORE = Internal.createForeignKey(StaffTable.STAFF, DSL.name("fk_staff_store"), new TableField[] { StaffTable.STAFF.STORE_ID }, Keys.KEY_STORE_PRIMARY, new TableField[] { StoreTable.STORE.STORE_ID }, true);
    public static final ForeignKey<StoreRecord, AddressRecord> FK_STORE_ADDRESS = Internal.createForeignKey(StoreTable.STORE, DSL.name("fk_store_address"), new TableField[] { StoreTable.STORE.ADDRESS_ID }, Keys.KEY_ADDRESS_PRIMARY, new TableField[] { AddressTable.ADDRESS.ADDRESS_ID }, true);
    public static final ForeignKey<StoreRecord, StaffRecord> FK_STORE_STAFF = Internal.createForeignKey(StoreTable.STORE, DSL.name("fk_store_staff"), new TableField[] { StoreTable.STORE.MANAGER_STAFF_ID }, Keys.KEY_STAFF_PRIMARY, new TableField[] { StaffTable.STAFF.STAFF_ID }, true);
}
