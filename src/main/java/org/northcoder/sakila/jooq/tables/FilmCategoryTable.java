/*
 * This file is generated by jOOQ.
 */
package org.northcoder.sakila.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.northcoder.sakila.jooq.Keys;
import org.northcoder.sakila.jooq.Sakila;
import org.northcoder.sakila.jooq.tables.CategoryTable.CategoryPath;
import org.northcoder.sakila.jooq.tables.FilmTable.FilmPath;
import org.northcoder.sakila.jooq.tables.records.FilmCategoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FilmCategoryTable extends TableImpl<FilmCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sakila.film_category</code>
     */
    public static final FilmCategoryTable FILM_CATEGORY = new FilmCategoryTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilmCategoryRecord> getRecordType() {
        return FilmCategoryRecord.class;
    }

    /**
     * The column <code>sakila.film_category.film_id</code>.
     */
    public final TableField<FilmCategoryRecord, Integer> FILM_ID = createField(DSL.name("film_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sakila.film_category.category_id</code>.
     */
    public final TableField<FilmCategoryRecord, Integer> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sakila.film_category.last_update</code>.
     */
    public final TableField<FilmCategoryRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private FilmCategoryTable(Name alias, Table<FilmCategoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FilmCategoryTable(Name alias, Table<FilmCategoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>sakila.film_category</code> table reference
     */
    public FilmCategoryTable(String alias) {
        this(DSL.name(alias), FILM_CATEGORY);
    }

    /**
     * Create an aliased <code>sakila.film_category</code> table reference
     */
    public FilmCategoryTable(Name alias) {
        this(alias, FILM_CATEGORY);
    }

    /**
     * Create a <code>sakila.film_category</code> table reference
     */
    public FilmCategoryTable() {
        this(DSL.name("film_category"), null);
    }

    public <O extends Record> FilmCategoryTable(Table<O> path, ForeignKey<O, FilmCategoryRecord> childPath, InverseForeignKey<O, FilmCategoryRecord> parentPath) {
        super(path, childPath, parentPath, FILM_CATEGORY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FilmCategoryPath extends FilmCategoryTable implements Path<FilmCategoryRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FilmCategoryPath(Table<O> path, ForeignKey<O, FilmCategoryRecord> childPath, InverseForeignKey<O, FilmCategoryRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FilmCategoryPath(Name alias, Table<FilmCategoryRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FilmCategoryPath as(String alias) {
            return new FilmCategoryPath(DSL.name(alias), this);
        }

        @Override
        public FilmCategoryPath as(Name alias) {
            return new FilmCategoryPath(alias, this);
        }

        @Override
        public FilmCategoryPath as(Table<?> alias) {
            return new FilmCategoryPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sakila.SAKILA;
    }

    @Override
    public UniqueKey<FilmCategoryRecord> getPrimaryKey() {
        return Keys.KEY_FILM_CATEGORY_PRIMARY;
    }

    @Override
    public List<ForeignKey<FilmCategoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_FILM_CATEGORY_FILM, Keys.FK_FILM_CATEGORY_CATEGORY);
    }

    private transient FilmPath _film;

    /**
     * Get the implicit join path to the <code>sakila.film</code> table.
     */
    public FilmPath film() {
        if (_film == null)
            _film = new FilmPath(this, Keys.FK_FILM_CATEGORY_FILM, null);

        return _film;
    }

    private transient CategoryPath _category;

    /**
     * Get the implicit join path to the <code>sakila.category</code> table.
     */
    public CategoryPath category() {
        if (_category == null)
            _category = new CategoryPath(this, Keys.FK_FILM_CATEGORY_CATEGORY, null);

        return _category;
    }

    @Override
    public TableField<FilmCategoryRecord, LocalDateTime> getRecordTimestamp() {
        return LAST_UPDATE;
    }

    @Override
    public FilmCategoryTable as(String alias) {
        return new FilmCategoryTable(DSL.name(alias), this);
    }

    @Override
    public FilmCategoryTable as(Name alias) {
        return new FilmCategoryTable(alias, this);
    }

    @Override
    public FilmCategoryTable as(Table<?> alias) {
        return new FilmCategoryTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FilmCategoryTable rename(String name) {
        return new FilmCategoryTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilmCategoryTable rename(Name name) {
        return new FilmCategoryTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilmCategoryTable rename(Table<?> name) {
        return new FilmCategoryTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilmCategoryTable where(Condition condition) {
        return new FilmCategoryTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilmCategoryTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilmCategoryTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilmCategoryTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilmCategoryTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilmCategoryTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilmCategoryTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilmCategoryTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilmCategoryTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilmCategoryTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
